var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import UniversalProvider from '@walletconnect/universal-provider';
import { Secp256k1KeyIdentity } from '@dfinity/identity-secp256k1';
import { DelegationChain, DelegationIdentity } from '@dfinity/identity';
import { WC_CHAIN_ID, WC_METHODS } from '../constants/walletConnect';
import { arrayBufferToBase64 } from '../utils/arrayBuffer';
import { HttpAgent } from '@dfinity/agent';
const LOCAL_SESIONS_KEY = 'session';
const DELEGATION = 'delegation';
const ICP_WC_NAMESPACE = {
    icp: {
        methods: WC_METHODS,
        events: ['chainChanged", "accountsChanged'],
        chains: [WC_CHAIN_ID],
    },
};
class MobileProvider {
    constructor(options) {
        this.provider = null;
        this.isWallectConnectPaired = false;
        this.walletConnectSession = null;
        this.isFocused = true;
        this.walletConnectProjectId = options.walletConnectProjectId;
        this.debug = options.debug;
        this.window = options.window;
        const backedUpSession = localStorage.getItem(LOCAL_SESIONS_KEY);
        if (backedUpSession) {
            this.localIdentity = Secp256k1KeyIdentity.fromJSON(backedUpSession);
        }
        else {
            this.localIdentity = Secp256k1KeyIdentity.generate();
            localStorage.setItem(LOCAL_SESIONS_KEY, JSON.stringify(this.localIdentity.toJSON()));
        }
        const backedUpDelegation = localStorage.getItem(DELEGATION);
        if (backedUpDelegation) {
            this.delegatedIdentity =
                this.createIdentityFromDelegation(backedUpDelegation);
        }
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = yield UniversalProvider.init({
                projectId: this.walletConnectProjectId,
            });
            this.provider = provider;
            const sessions = provider.client.session.getAll();
            if (sessions.length > 0) {
                this.walletConnectSession = sessions[sessions.length - 1];
            }
            else {
                const { uri, approval } = yield this.provider.client.connect({
                    requiredNamespaces: ICP_WC_NAMESPACE,
                });
                this.wcPairUri = uri;
                this.connectionPromise = approval;
            }
            this.window.addEventListener('visibilitychange', (event) => {
                this.isFocused = event.target.visibilityState == 'visible';
            });
        });
    }
    static isMobileBrowser() {
        const ua = navigator.userAgent.toLowerCase();
        const isAndroid = ua.indexOf('android') > -1;
        const isApple = ua.indexOf('iphone') > -1 || ua.indexOf('ipad') > -1;
        return isAndroid || isApple;
    }
    debugLog(...logItems) {
        this.debug && console.log(logItems);
    }
    pair() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.provider)
                return Promise.reject('Provider unavailable');
            if (this.isWallectConnectPaired)
                return Promise.reject('Already paired');
            if (!this.wcPairUri)
                return Promise.reject('URI not set');
            if (!this.connectionPromise)
                return Promise.reject('No session approval listener');
            const url = `https://plugwallet.ooo/wc?uri=${this.wcPairUri}`;
            this.window.location = url;
            const session = yield this.connectionPromise();
            this.debugLog('Session approved');
            this.isWallectConnectPaired = true;
            this.walletConnectSession = session;
            return true;
        });
    }
    createAgent({ host, targets }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.delegatedIdentity) {
                this.delegatedIdentity = yield this.createDelegatedIdentity(targets);
            }
            return new HttpAgent({ identity: this.delegatedIdentity, host });
        });
    }
    isPaired() {
        return !!this.walletConnectSession;
    }
    disconnect() {
        this.delegatedIdentity = undefined;
        localStorage.removeItem(DELEGATION);
        return true;
    }
    requestTransfer(params) {
        return this.callViaWalletConnect('requestTransfer', params);
    }
    requestTransferToken(params) {
        return this.callViaWalletConnect('requestTransferToken', params);
    }
    callViaWalletConnect(method, params) {
        var _a;
        this.debugLog('Calling via WC', { method, params });
        if (this.isFocused) {
            this.window.location = 'https://plugwallet.ooo/wc';
        }
        return (_a = this.provider) === null || _a === void 0 ? void 0 : _a.client.request({
            chainId: WC_CHAIN_ID,
            topic: this.walletConnectSession.topic,
            request: {
                method,
                params,
            },
        });
    }
    createIdentityFromDelegation(delegation) {
        const delegationChain = DelegationChain.fromJSON(delegation);
        localStorage.setItem(DELEGATION, delegation);
        return DelegationIdentity.fromDelegation(this.localIdentity, delegationChain);
    }
    createDelegatedIdentity(targets) {
        return __awaiter(this, void 0, void 0, function* () {
            const publicKey = arrayBufferToBase64(this.localIdentity.getPublicKey().derKey);
            const delegation = yield this.callViaWalletConnect('requestDelegation', {
                publicKey,
                targets,
            });
            this.debugLog('Delegation response', delegation);
            return this.createIdentityFromDelegation(delegation);
        });
    }
}
export default MobileProvider;
